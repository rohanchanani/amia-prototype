sections <- questions_df %>% distinct(section) %>% pull(section)
section_replacements <- c("Asthma", "Sickle Cell", "Cystic Fibrosis", "Hemophilia", "Myocarditis", "Kawasaki disease", "Leukemia")
replace_company <- function(company) {
return(company_replacements[match(company, companies)])
}
replace_section <- function(section) {
return(section_replacements[match(section, sections)])
}
full_section <- function(section) {
return(sapply(section, replace_section))
}
full_company <- function(company) {
return(sapply(company, replace_company))
}
rand_column <- function(possibilities) {
random <- as.numberic(1:length(possibilities), 1)
return(possibilities[random])
}
rand_admit <- function(test) {
return(rand_column(c(0, 1)))
}
rand_setting <- function(test) {
return(rand_column(c("Inpatient", "ED", "Outpatient")))
}
rand_campus <- function(test) {
return(rand_column(c("Scottish-Rite", "Egleston")))
}
oneClassify <- function(length) {
if(length < 250) {
return("Medicaid")
}
if(length<400) {
return("Private")
}
return("Self-Pay")
}
classify <- function(column) {
sapply(column, oneClassify)
}
calcMean <- function(array) {
if (length(array) != 0) {
return(mean(array))
} else {
return(0)
}
}
questions_df <- questions_df %>% mutate(Disease=full_section(section), "Zip Code"=full_company(company_name), Insurance=classify(nchar(question)+nchar(answer)), "Length of Stay"=nchar(question)+nchar(answer), Readmissions=sapply(question, rand_admit), Setting=sapply(question, rand_setting), Campus=sapply(question, rand_campus)) %>% subset(select=c("Disease", "Zip Code", "Insurance", "Length of Stay", "Readmissions", "Setting", "Campus"))
oneClassify <- function(length) {
if(length < 250) {
return("Medicaid")
}
if(length<400) {
return("Private")
}
return("Self-Pay")
}
classify <- function(column) {
sapply(column, oneClassify)
}
calcMean <- function(array) {
if (length(array) != 0) {
return(mean(array))
} else {
return(0)
}
}
library(dplyr)
library(readr)
library(stringr)
library(ggplot2)
library(tools)
library(Dict)
library(labelled)
library(gsubfn)
questions_df <- read_csv("C:\\Users\\Rohan Chanani\\Downloads\\questions.csv")
questions_df <- questions_df %>% mutate(Disease=full_section(section), "Zip Code"=full_company(company_name), Insurance=classify(nchar(question)+nchar(answer)), "Length of Stay"=nchar(question)+nchar(answer), Readmissions=sapply(question, rand_admit), Setting=sapply(question, rand_setting), Campus=sapply(question, rand_campus)) %>% subset(select=c("Disease", "Zip Code", "Insurance", "Length of Stay", "Readmissions", "Setting", "Campus"))
companies <- questions_df %>% distinct(company_name) %>% pull(company_name)
company_replacements <- c("30305", "30306", "30307", "30308", "30309")
sections <- questions_df %>% distinct(section) %>% pull(section)
section_replacements <- c("Asthma", "Sickle Cell", "Cystic Fibrosis", "Hemophilia", "Myocarditis", "Kawasaki disease", "Leukemia")
replace_company <- function(company) {
return(company_replacements[match(company, companies)])
}
replace_section <- function(section) {
return(section_replacements[match(section, sections)])
}
full_section <- function(section) {
return(sapply(section, replace_section))
}
full_company <- function(company) {
return(sapply(company, replace_company))
}
rand_column <- function(possibilities) {
random <- as.numberic(1:length(possibilities), 1)
return(possibilities[random])
}
rand_admit <- function(test) {
return(rand_column(c(0, 1)))
}
rand_setting <- function(test) {
return(rand_column(c("Inpatient", "ED", "Outpatient")))
}
rand_campus <- function(test) {
return(rand_column(c("Scottish-Rite", "Egleston")))
}
rand_insurance <- function(test) {
return(rand_column(c("Medicaid", "Self Pay", "Private")))
}
questions_df <- questions_df %>% mutate(Disease=full_section(section), "Zip Code"=full_company(company_name), Insurance=sapply(question, rand_insurance), "Length of Stay"=nchar(question)+nchar(answer), Readmissions=sapply(question, rand_admit), Setting=sapply(question, rand_setting), Campus=sapply(question, rand_campus)) %>% subset(select=c("Disease", "Zip Code", "Insurance", "Length of Stay", "Readmissions", "Setting", "Campus"))
companies <- questions_df %>% distinct(company_name) %>% pull(company_name)
company_replacements <- c("30305", "30306", "30307", "30308", "30309")
sections <- questions_df %>% distinct(section) %>% pull(section)
section_replacements <- c("Asthma", "Sickle Cell", "Cystic Fibrosis", "Hemophilia", "Myocarditis", "Kawasaki disease", "Leukemia")
replace_company <- function(company) {
return(company_replacements[match(company, companies)])
}
replace_section <- function(section) {
return(section_replacements[match(section, sections)])
}
full_section <- function(section) {
return(sapply(section, replace_section))
}
full_company <- function(company) {
return(sapply(company, replace_company))
}
rand_column <- function(possibilities) {
random <- as.numeric(1:length(possibilities), 1)
return(possibilities[random])
}
rand_admit <- function(test) {
return(rand_column(c(0, 1)))
}
rand_setting <- function(test) {
return(rand_column(c("Inpatient", "ED", "Outpatient")))
}
rand_campus <- function(test) {
return(rand_column(c("Scottish-Rite", "Egleston")))
}
rand_insurance <- function(test) {
return(rand_column(c("Medicaid", "Self Pay", "Private")))
}
questions_df <- questions_df %>% mutate(Disease=full_section(section), "Zip Code"=full_company(company_name), Insurance=sapply(question, rand_insurance), "Length of Stay"=nchar(question)+nchar(answer), Readmissions=sapply(question, rand_admit), Setting=sapply(question, rand_setting), Campus=sapply(question, rand_campus)) %>% subset(select=c("Disease", "Zip Code", "Insurance", "Length of Stay", "Readmissions", "Setting", "Campus"))
companies <- questions_df %>% distinct(company_name) %>% pull(company_name)
company_replacements <- c("30305", "30306", "30307", "30308", "30309")
sections <- questions_df %>% distinct(section) %>% pull(section)
section_replacements <- c("Asthma", "Sickle Cell", "Cystic Fibrosis", "Hemophilia", "Myocarditis", "Kawasaki disease", "Leukemia")
replace_company <- function(company) {
return(company_replacements[match(company, companies)])
}
replace_section <- function(section) {
return(section_replacements[match(section, sections)])
}
full_section <- function(section) {
return(sapply(section, replace_section))
}
full_company <- function(company) {
return(sapply(company, replace_company))
}
rand_column <- function(possibilities) {
random <- as.numeric(1:length(possibilities), 1)
return(possibilities[random])
}
rand_admit <- function(test) {
return(rand_column(c(0, 1)))
}
rand_setting <- function(test) {
return(rand_column(c("Inpatient", "ED", "Outpatient")))
}
rand_campus <- function(test) {
return(rand_column(c("Scottish-Rite", "Egleston")))
}
rand_insurance <- function(test) {
return(rand_column(c("Medicaid", "Self Pay", "Private")))
}
questions_df <- questions_df %>% mutate(Disease=full_section(section), "Zip Code"=full_company(company_name), Insurance=sapply(question, rand_insurance), "Length of Stay"=nchar(question)+nchar(answer), Readmissions=sapply(question, rand_admit), Setting=sapply(question, rand_setting), Campus=sapply(question, rand_campus)) %>% subset(select=c("Disease", "Zip Code", "Insurance", "Length of Stay", "Readmissions", "Setting", "Campus"))
rand_insurance("")
companies <- questions_df %>% distinct(company_name) %>% pull(company_name)
company_replacements <- c("30305", "30306", "30307", "30308", "30309")
sections <- questions_df %>% distinct(section) %>% pull(section)
section_replacements <- c("Asthma", "Sickle Cell", "Cystic Fibrosis", "Hemophilia", "Myocarditis", "Kawasaki disease", "Leukemia")
replace_company <- function(company) {
return(company_replacements[match(company, companies)])
}
replace_section <- function(section) {
return(section_replacements[match(section, sections)])
}
full_section <- function(section) {
return(sapply(section, replace_section))
}
full_company <- function(company) {
return(sapply(company, replace_company))
}
rand_column <- function(possibilities) {
random <- as.numeric(1:length(possibilities), 1)
return(random)
return(possibilities[random])
}
rand_admit <- function(test) {
return(rand_column(c(0, 1)))
}
rand_setting <- function(test) {
return(rand_column(c("Inpatient", "ED", "Outpatient")))
}
rand_campus <- function(test) {
return(rand_column(c("Scottish-Rite", "Egleston")))
}
rand_insurance <- function(test) {
return(rand_column(c("Medicaid", "Self Pay", "Private")))
}
rand_insurance
rand_insurance()
companies <- questions_df %>% distinct(company_name) %>% pull(company_name)
company_replacements <- c("30305", "30306", "30307", "30308", "30309")
sections <- questions_df %>% distinct(section) %>% pull(section)
section_replacements <- c("Asthma", "Sickle Cell", "Cystic Fibrosis", "Hemophilia", "Myocarditis", "Kawasaki disease", "Leukemia")
replace_company <- function(company) {
return(company_replacements[match(company, companies)])
}
replace_section <- function(section) {
return(section_replacements[match(section, sections)])
}
full_section <- function(section) {
return(sapply(section, replace_section))
}
full_company <- function(company) {
return(sapply(company, replace_company))
}
rand_column <- function(possibilities) {
random <- as.numeric(sample(1:length(possibilities), 1))
return(random)
return(possibilities[random])
}
rand_admit <- function(test) {
return(rand_column(c(0, 1)))
}
rand_setting <- function(test) {
return(rand_column(c("Inpatient", "ED", "Outpatient")))
}
rand_campus <- function(test) {
return(rand_column(c("Scottish-Rite", "Egleston")))
}
rand_insurance <- function(test) {
return(rand_column(c("Medicaid", "Self Pay", "Private")))
}
rand_insurance()
rand_insurance()
rand_insurance()
rand_insurance()
rand_insurance()
companies <- questions_df %>% distinct(company_name) %>% pull(company_name)
company_replacements <- c("30305", "30306", "30307", "30308", "30309")
sections <- questions_df %>% distinct(section) %>% pull(section)
section_replacements <- c("Asthma", "Sickle Cell", "Cystic Fibrosis", "Hemophilia", "Myocarditis", "Kawasaki disease", "Leukemia")
replace_company <- function(company) {
return(company_replacements[match(company, companies)])
}
replace_section <- function(section) {
return(section_replacements[match(section, sections)])
}
full_section <- function(section) {
return(sapply(section, replace_section))
}
full_company <- function(company) {
return(sapply(company, replace_company))
}
rand_column <- function(possibilities) {
random <- as.numeric(sample(1:length(possibilities), 1))
return(possibilities[random])
}
rand_admit <- function(test) {
return(rand_column(c(0, 1)))
}
rand_setting <- function(test) {
return(rand_column(c("Inpatient", "ED", "Outpatient")))
}
rand_campus <- function(test) {
return(rand_column(c("Scottish-Rite", "Egleston")))
}
rand_insurance <- function(test) {
return(rand_column(c("Medicaid", "Self Pay", "Private")))
}
rand_insurance()
rand_insurance()
rand_insurance()
rand_insurance()
rand_insurance()
rand_insurance()
questions_df <- questions_df %>% mutate(Disease=full_section(section), "Zip Code"=full_company(company_name), Insurance=sapply(question, rand_insurance), "Length of Stay"=nchar(question)+nchar(answer), Readmissions=sapply(question, rand_admit), Setting=sapply(question, rand_setting), Campus=sapply(question, rand_campus)) %>% subset(select=c("Disease", "Zip Code", "Insurance", "Length of Stay", "Readmissions", "Setting", "Campus"))
head(questions_df)
diagnosticGraph <- function(determinant, metric, isNumeric, setting, campus) {
usableData <- questions_df %>% filter(Setting==setting, Campus==campus)
determinantPossibilities <- usableData %>% distinct(!!as.symbol(determinant)) %>% pull(!!as.symbol(determinant)) %>% remove_attributes("names")
graphTable <- data.frame(determinantPossibilities)
names(graphTable)[1] <- 'determinant'
metricValues <- c()
for (row in 1:length(determinantPossibilities)) {
if (isNumeric) {
avgVal <- usableData %>% filter(!!as.symbol(determinant)==determinantPossibilities[row]) %>% pull(!!as.symbol(metric)) %>% calcMean()
metricValues[row] <- avgVal
} else {
occurences <- usableData %>% filter(!!as.symbol(determinant)==determinantPossibilities[row], !!as.symbol(metric)==1) %>% nrow()
total <- usableData %>% filter(!!as.symbol(determinant)==determinantPossibilities[row]) %>% nrow()
metricValues[row] <- occurences / total
}
}
outputTable['metric'] <- metricValues
return(ggplot(data=outputTable, aes(x=determinant, y=metric)) + geom_bar(aes(x=determinant), stat='identity') + coord_flip() + ggtitle(toTitleCase(paste(metric, "by", determinant))) + labs(x=toTitleCase(determinant), y=toTitleCase(metric)))
}
diagnosticGraph("Insurance", "Readmissions", FALSE, "ED", "Egleston")
diagnosticGraph <- function(determinant, metric, isNumeric, setting, campus) {
usableData <- questions_df %>% filter(Setting==setting, Campus==campus)
determinantPossibilities <- usableData %>% distinct(!!as.symbol(determinant)) %>% pull(!!as.symbol(determinant)) %>% remove_attributes("names")
graphTable <- data.frame(determinantPossibilities)
names(graphTable)[1] <- 'determinant'
metricValues <- c()
for (row in 1:length(determinantPossibilities)) {
if (isNumeric) {
avgVal <- usableData %>% filter(!!as.symbol(determinant)==determinantPossibilities[row]) %>% pull(!!as.symbol(metric)) %>% calcMean()
metricValues[row] <- avgVal
} else {
occurences <- usableData %>% filter(!!as.symbol(determinant)==determinantPossibilities[row], !!as.symbol(metric)==1) %>% nrow()
total <- usableData %>% filter(!!as.symbol(determinant)==determinantPossibilities[row]) %>% nrow()
metricValues[row] <- occurences / total
}
}
graphTable['metric'] <- metricValues
return(ggplot(data=graphTable, aes(x=determinant, y=metric)) + geom_bar(aes(x=determinant), stat='identity') + coord_flip() + ggtitle(toTitleCase(paste(metric, "by", determinant))) + labs(x=toTitleCase(determinant), y=toTitleCase(metric)))
}
diagnosticGraph("Insurance", "Readmissions", FALSE, "ED", "Egleston")
createTables <- function(dimension, determinant, metric, isNumeric) {
values1 <- questions_df %>% distinct(!!as.symbol(dimension)) %>% pull(!!as.symbol(dimension)) %>% remove_attributes("names")
outputTable <- data.frame(values1)
names(outputTable)[1] <- dimension
outputExpected <- outputTable
outputDifference <- outputTable
outputTotal <- outputTable
values2 <- questions_df %>% distinct(!!as.symbol(determinant)) %>% pull(!!as.symbol(determinant)) %>% remove_attributes("names")
for (col in 1:length(values2)) {
newCol <- c()
totals <- c()
newExpected <- c()
newDifference <- c()
for (row in 1:length(values1)) {
totalEncounters <- questions_df %>% filter(!!as.symbol(dimension)==values1[row]) %>% nrow()
metricVector <- questions_df %>% filter(!!as.symbol(dimension)==values1[row], !!as.symbol(determinant)==values2[col]) %>% pull(!!as.symbol(metric))
newCol[row] <- metricVector %>% calcMean()
totals[row] <- metricVector %>% sum()
expectedRate <- questions_df %>% filter(!!as.symbol(dimension)==values1[row]) %>% pull(!!as.symbol(metric)) %>% sum()
newExpected[row] <- expectedRate * length(metricVector)
newDifference[row] <- totals[row] - newExpected[row]
}
outputTable[values2[col]] <- newCol
outputExpected[values2[col]] <- newExpected
outputTotal[values2[col]] <- totals
outputDifference[values2[col]] <- newDifference
}
return(list(outputTable, outputTotal, outputExpected, outputDifference))
}
diagnosticGraph <- function(determinant, metric, setting, campus) {
usableData <- questions_df %>% filter(Setting==setting, Campus==campus)
determinantPossibilities <- usableData %>% distinct(!!as.symbol(determinant)) %>% pull(!!as.symbol(determinant)) %>% remove_attributes("names")
graphTable <- data.frame(determinantPossibilities)
names(graphTable)[1] <- 'determinant'
metricValues <- c()
for (row in 1:length(determinantPossibilities)) {
metricValues[row] <- usableData %>% filter(!!as.symbol(determinant)==determinantPossibilities[row]) %>% pull(!!as.symbol(metric)) %>% calcMean()
}
graphTable['metric'] <- metricValues
return(ggplot(data=graphTable, aes(x=determinant, y=metric)) + geom_bar(aes(x=determinant), stat='identity') + coord_flip() + ggtitle(toTitleCase(paste(metric, "by", determinant))) + labs(x=toTitleCase(determinant), y=toTitleCase(metric)))
}
diagnosticGraph("Insurance", "Readmissions", FALSE, "ED", "Egleston")
diagnosticGraph("Insurance", "Readmissions", "ED", "Egleston")
diagnosticGraph <- function(determinant, metric, isNumeric, setting, campus) {
usableData <- questions_df %>% filter(Setting==setting, Campus==campus)
determinantPossibilities <- usableData %>% distinct(!!as.symbol(determinant)) %>% pull(!!as.symbol(determinant)) %>% remove_attributes("names")
graphTable <- data.frame(determinantPossibilities)
names(graphTable)[1] <- 'determinant'
metricValues <- c()
for (row in 1:length(determinantPossibilities)) {
if (isNumeric) {
avgVal <- usableData %>% filter(!!as.symbol(determinant)==determinantPossibilities[row]) %>% pull(!!as.symbol(metric)) %>% calcMean()
metricValues[row] <- avgVal
} else {
occurences <- usableData %>% filter(!!as.symbol(determinant)==determinantPossibilities[row], !!as.symbol(metric)==1) %>% nrow()
total <- usableData %>% filter(!!as.symbol(determinant)==determinantPossibilities[row]) %>% nrow()
metricValues[row] <- occurences / total
}
}
graphTable['metric'] <- metricValues
return(ggplot(data=graphTable, aes(x=determinant, y=metric)) + geom_bar(aes(x=determinant), stat='identity') + coord_flip() + ggtitle(toTitleCase(paste(metric, "by", determinant))) + labs(x=toTitleCase(determinant), y=toTitleCase(metric)))
}
diagnosticGraph("Insurance", "Readmissions", FALSE, "ED", "Egleston")
diagnosticGraph <- function(determinant, metric, setting, campus) {
usableData <- questions_df %>% filter(Setting==setting, Campus==campus)
determinantPossibilities <- usableData %>% distinct(!!as.symbol(determinant)) %>% pull(!!as.symbol(determinant)) %>% remove_attributes("names")
graphTable <- data.frame(determinantPossibilities)
names(graphTable)[1] <- 'determinant'
metricValues <- c()
for (row in 1:length(determinantPossibilities)) {
metricValues[row] <- usableData %>% filter(!!as.symbol(determinant)==determinantPossibilities[row]) %>% pull(!!as.symbol(metric)) %>% calcMean()
}
graphTable['metric'] <- metricValues
return(ggplot(data=graphTable, aes(x=determinant, y=metric)) + geom_bar(aes(x=determinant), stat='identity') + coord_flip() + ggtitle(toTitleCase(paste(metric, "by", determinant))) + labs(x=toTitleCase(determinant), y=toTitleCase(metric)))
}
diagnosticGraph("Insurance", "Readmissions", "ED", "Egleston")
createTables <- function(dimension, determinant, metric) {
values1 <- questions_df %>% distinct(!!as.symbol(dimension)) %>% pull(!!as.symbol(dimension)) %>% remove_attributes("names")
outputTable <- data.frame(values1)
names(outputTable)[1] <- dimension
outputExpected <- outputTable
outputDifference <- outputTable
outputTotal <- outputTable
values2 <- questions_df %>% distinct(!!as.symbol(determinant)) %>% pull(!!as.symbol(determinant)) %>% remove_attributes("names")
for (col in 1:length(values2)) {
newCol <- c()
totals <- c()
newExpected <- c()
newDifference <- c()
for (row in 1:length(values1)) {
totalEncounters <- questions_df %>% filter(!!as.symbol(dimension)==values1[row]) %>% nrow()
metricVector <- questions_df %>% filter(!!as.symbol(dimension)==values1[row], !!as.symbol(determinant)==values2[col]) %>% pull(!!as.symbol(metric))
newCol[row] <- metricVector %>% calcMean()
totals[row] <- metricVector %>% sum()
expectedRate <- questions_df %>% filter(!!as.symbol(dimension)==values1[row]) %>% pull(!!as.symbol(metric)) %>% sum()
newExpected[row] <- expectedRate * length(metricVector)
newDifference[row] <- totals[row] - newExpected[row]
}
outputTable[values2[col]] <- newCol
outputExpected[values2[col]] <- newExpected
outputTotal[values2[col]] <- totals
outputDifference[values2[col]] <- newDifference
}
return(list(outputTable, outputTotal, outputExpected, outputDifference))
}
createTables <- function(dimension, determinant, metric) {
values1 <- questions_df %>% distinct(!!as.symbol(dimension)) %>% pull(!!as.symbol(dimension)) %>% remove_attributes("names")
outputTable <- data.frame(values1)
names(outputTable)[1] <- dimension
outputExpected <- outputTable
outputDifference <- outputTable
outputTotal <- outputTable
values2 <- questions_df %>% distinct(!!as.symbol(determinant)) %>% pull(!!as.symbol(determinant)) %>% remove_attributes("names")
for (col in 1:length(values2)) {
newCol <- c()
totals <- c()
newExpected <- c()
newDifference <- c()
for (row in 1:length(values1)) {
totalEncounters <- questions_df %>% filter(!!as.symbol(dimension)==values1[row]) %>% nrow()
metricVector <- questions_df %>% filter(!!as.symbol(dimension)==values1[row], !!as.symbol(determinant)==values2[col]) %>% pull(!!as.symbol(metric))
newCol[row] <- metricVector %>% calcMean()
totals[row] <- metricVector %>% sum()
expectedRate <- questions_df %>% filter(!!as.symbol(dimension)==values1[row]) %>% pull(!!as.symbol(metric)) %>% sum()
newExpected[row] <- expectedRate * length(metricVector)
newDifference[row] <- totals[row] - newExpected[row]
}
outputTable[values2[col]] <- newCol
outputExpected[values2[col]] <- newExpected
outputTotal[values2[col]] <- totals
outputDifference[values2[col]] <- newDifference
}
return(list(outputTable, outputTotal, outputExpected, outputDifference))
}
results <- createTables("Zip Code", "Insurance", "Readmissions")
results[1]
results[2]
results[3]
questions_df %>% nrow()
results[2]
results[3]
createTables <- function(dimension, determinant, metric) {
values1 <- questions_df %>% distinct(!!as.symbol(dimension)) %>% pull(!!as.symbol(dimension)) %>% remove_attributes("names")
outputTable <- data.frame(values1)
names(outputTable)[1] <- dimension
outputExpected <- outputTable
outputDifference <- outputTable
outputTotal <- outputTable
values2 <- questions_df %>% distinct(!!as.symbol(determinant)) %>% pull(!!as.symbol(determinant)) %>% remove_attributes("names")
for (col in 1:length(values2)) {
newCol <- c()
totals <- c()
newExpected <- c()
newDifference <- c()
for (row in 1:length(values1)) {
totalEncounters <- questions_df %>% filter(!!as.symbol(dimension)==values1[row]) %>% nrow()
metricVector <- questions_df %>% filter(!!as.symbol(dimension)==values1[row], !!as.symbol(determinant)==values2[col]) %>% pull(!!as.symbol(metric))
newCol[row] <- metricVector %>% calcMean()
totals[row] <- metricVector %>% sum()
expectedRate <- questions_df %>% filter(!!as.symbol(dimension)==values1[row]) %>% pull(!!as.symbol(metric)) %>% calcMean()
newExpected[row] <- expectedRate * length(metricVector)
newDifference[row] <- totals[row] - newExpected[row]
}
outputTable[values2[col]] <- newCol
outputExpected[values2[col]] <- newExpected
outputTotal[values2[col]] <- totals
outputDifference[values2[col]] <- newDifference
}
return(list(outputTable, outputTotal, outputExpected, outputDifference))
}
results <- createTables("Zip Code", "Insurance", "Readmissions")
results[3]
results[2]
results[3]
results[4]
results[3]
results[4]
shiny::runApp('amia-prototype')
runApp('amia-prototype')
runApp('amia-prototype')
runApp('amia-prototype')
runApp()
runApp('amia-prototype')
